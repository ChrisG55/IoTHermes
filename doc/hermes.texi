@menu
* Introducing Hermes:: Overview of the Hermes protocol
* Interface:: Hermes protocol function interface
@end menu

@node Introducing Hermes
@section Introducing Hermes

@cindex section, Introducing Hermes

Hermes is an application layer protocol for @acronym{IoT}.
It is capable to reduce @acronym{IoT} network traffic by exploiting a novel concept based on generalized deduplication.

@node Interface
@section Interface

@cindex section, Interface

The Hermes library interface provides a basic set of functions for nodes to interact with each other.

@itemize @bullet
@item
@code{hermes_connect}: connect a node to the Hermes network

@item
@code{hermes_disconnect}: disconnect a node from the Hermes network

@item
@code{hermes_fini}: free all resources used in the Hermes context

@item
@code{struct hermes_context *hermes_init(unsigned long id, size_t s)}

Initialize a Hermes context

The function allocates memory for a Hermes context.
If the stream identification @code{id} is @code{0}, the function will generate a random stream identification, otherwise, the function will assign the stream identification to the Hermes context.
If the stream identification size @code{s} is @code{0}, the random stream identification will have a @code{HERMES_DEFAULT_STREAM_ID_SIZE} size, otherwise the size of the stream identification will be truncated to @code{s}.
Is the stream identification size @code{s} greater than @code{sizeof(unsigned long)} it will be ignored.
The function returns a pointer to a Hermes context if successful, otherwise, a @code{NULL} pointer is returned and @code{errno} is set to indicate the error.

@item
@code{hermes_send}: send a message to the Hermes network
@end itemize
@findex hermes_connect
@findex hermes_disconnect
@findex hermes_fini
@findex hermes_init
@findex hermes_send
